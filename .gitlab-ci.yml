stages:
  - test  # Run tests first
  - build  # Run build after tests
  - deploy  # Run deploy after build

services:
  - postgres:14.2-bullseye

variables:
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test
  POSTGRES_HOST_AUTH_METHOD: trust
  DATABASE_URL: postgresql://postgres:test@postgres:5432/postgres
  DJWTO_SIGNING_KEY: f0faec83aca44b61ca155686bb2bb6a1f56420c84d04abe1dd3637649195123f
  CORS_HOST: https://pawfessional-programmers.gitlab.io

# TESTING
monolith-api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd monolith/api
    - pip install -r requirements.txt
    - export DATABASE_URL="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
    - python manage.py migrate
    - python manage.py test  # Run the tests

account-api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd accounts_microservice
    - pip install -r requirements.txt
    - export DATABASE_URL="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
    - python manage.py migrate
    - python manage.py test # Run the tests

lint-project-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 monolith accounts_microservice # Run flake8 on project to check for code quality

## BUILDING
ghi-front-end-build-job:
  rules:
      - if: $CI_COMMIT_BRANCH == "deploy"
  stage: build
  image: node:lts-bullseye
  variables:
    PUBLIC_URL: https://pawfessional-programmers.gitlab.io/puppy-love
  needs:
    - monolith-api-unit-test-job   # These three must succeed for build-job to run
    - account-api-unit-test-job
    - lint-project-job  
  script:
    - cd ghi
    - npm install
    - npm run build   # Build the React application
    - cp build/index.html build/404.html  # Make this a SPA
  artifacts:
    paths:
      - ghi/build/  # Save all of the files in the build path

monolith-api-back-end-build-job:
  rules:
      - if: $CI_COMMIT_BRANCH == "deploy"
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd monolith/api
    - docker build -t ${CI_REGISTRY_IMAGE}/monolith_api:latest .  # Builds the image
    - docker tag ${CI_REGISTRY_IMAGE}/monolith_api:latest ${CI_REGISTRY_IMAGE}/monolith_api:$CI_JOB_ID  # Gives the image a specific name
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY  # Authenticates with the GitLab image registry
    - docker push ${CI_REGISTRY_IMAGE}/monolith_api:$CI_JOB_ID  # Stores your image in the GitLab image registry w/ version from tag
    - docker push ${CI_REGISTRY_IMAGE}/monolith_api:latest  # Stores your image in the GitLab image registry with the name latest

account-api-back-end-build-job:
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd accounts_microservice
    - docker build -t ${CI_REGISTRY_IMAGE}/account_api:latest .  
    - docker tag ${CI_REGISTRY_IMAGE}/account_api:latest ${CI_REGISTRY_IMAGE}/account_api:$CI_JOB_ID  
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY 
    - docker push ${CI_REGISTRY_IMAGE}/account_api:$CI_JOB_ID  
    - docker push ${CI_REGISTRY_IMAGE}/account_api:latest  

monolith-poller-back-end-build-job:
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd monolith/poll
    - docker build -t ${CI_REGISTRY_IMAGE}/monolith_poller:latest .  
    - docker tag ${CI_REGISTRY_IMAGE}/monolith_poller:latest ${CI_REGISTRY_IMAGE}/monolith_poller:$CI_JOB_ID  
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY 
    - docker push ${CI_REGISTRY_IMAGE}/monolith_poller:$CI_JOB_ID  
    - docker push ${CI_REGISTRY_IMAGE}/monolith_poller:latest  
  
## DEPLOYING

deploy-monolith-api-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  stage: deploy
  image: docker:20.10.16
  needs:
    - monolith-api-back-end-build-job
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull ${CI_REGISTRY_IMAGE}/monolith_api:latest
    - docker tag ${CI_REGISTRY_IMAGE}/monolith_api:latest registry.heroku.com/$HEROKU_MONOLITH_API/web:latest
    - docker push registry.heroku.com/$HEROKU_MONOLITH_API/web:latest

deploy-account-api-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  stage: deploy
  image: docker:20.10.16
  needs:
    - account-api-back-end-build-job
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull ${CI_REGISTRY_IMAGE}/account_api:latest
    - docker tag ${CI_REGISTRY_IMAGE}/account_api:latest registry.heroku.com/$HEROKU_ACCOUNT_API/web:latest
    - docker push registry.heroku.com/$HEROKU_ACCOUNT_API/web:latest

deploy-monolith-poller-image-job:
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  stage: deploy
  image: docker:20.10.16
  needs:
    - monolith-poller-back-end-build-job
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull ${CI_REGISTRY_IMAGE}/monolith_poller:latest
    - docker tag ${CI_REGISTRY_IMAGE}/monolith_poller:latest registry.heroku.com/$HEROKU_MONOLITH_POLLER/worker:latest
    - docker push registry.heroku.com/$HEROKU_MONOLITH_POLLER/worker:latest

# RELEASE

release-monolith-api-image-job:
  stage: deploy
  image: node:10.17-alpine
  needs:
    - deploy-monolith-api-image-job
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku container:release web --app $HEROKU_MONOLITH_API

release-account-api-image-job:
  stage: deploy
  image: node:10.17-alpine
  needs:
    - deploy-account-api-image-job
  rules:
      - if: $CI_COMMIT_BRANCH == "deploy"
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku container:release web --app $HEROKU_ACCOUNT_API

release-monolith-poller-image-job:
  stage: deploy
  image: node:10.17-alpine
  needs:
    - deploy-monolith-poller-image-job
  rules:
      - if: $CI_COMMIT_BRANCH == "deploy"
  before_script:
    - apk add curl bash
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku container:release worker --app $HEROKU_MONOLITH_POLLER

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy"
  dependencies:
    - ghi-front-end-build-job
  needs:
    - ghi-front-end-build-job
  script:
    - mv ghi/build/ public
  artifacts:
    paths:
      - public