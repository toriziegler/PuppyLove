stages:
  - test  # Run tests first
  - build  # Run build after tests
  - deploy  # Run deploy after build

services:
  - postgres: 14.2-bullseye

variables:
  POSTGRES_PASSWORD: test
  DATABASE_URL: postgresql://postgres:test@postgres:5432/postgres

## TESTING
monolith-api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd monolith/api
    - pip install -r requirements.txt
    # - export DATABASE_URL
    # - python manage.py migrate  # Migrate the database
    - python manage.py test  # Run the tests

accounts-api-unit-test-job:
image: python:3-bullseye
stage: test
script:
  - cd accounts_microservice
  - pip install -r requirements.txt
  # - export DATABASE_URL
  # - python manage.py migrate # Migrate the database
  - python manage.py test # Run the tests

lint-project-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 monolith  # Run flake8 on project ot check for code quality

# ## BUILDING
# ghi-front-end-build-job:
#   rules:
#       # Only run if pushing to the main branch
#       - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: build
#   image: node:lts-bullseye
#   variables:
#     PUBLIC_URL: https://pawfessional-programmers.gitlab.io/puppy-love
#   needs:
#     - monolith-api-unit-test-job   # These three must succeed for build-job to run
#     - accounts-api-unit-test-job
#     - lint-project-job  
#   script:
#     - cd ghi
#     - npm install
#     - npm run build   # Build the React application
#     - cp build/index.html build/404.html  # Make this a SPA
#   artifacts:
#     paths:
#       - ghi/build/  # Save all of the files in the build path

# monolith-api-back-end-build-job:
#   rules:
#     # Only run if pushing to the main branch
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - cd monolith/api
#     - docker build -t ${CI_REGISTRY_IMAGE}/monolith_api:latest .  # Builds the image
#     - docker tag ${CI_REGISTRY_IMAGE}/monolith_api:latest ${CI_REGISTRY_IMAGE}/monolith_api:$CI_JOB_ID  # Gives the image a specific name
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY  # Authenticates with the GitLab image registry
#     - docker push ${CI_REGISTRY_IMAGE}/monolith_api:$CI_JOB_ID  # Stores your image in the GitLab image registry w/ version from tag
#     - docker push ${CI_REGISTRY_IMAGE}/monolith_api:latest  # Stores your image in the GitLab image registry with the name latest

# accounts-api-back-end-build-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - cd accounts_microservice
#     - docker build -t ${CI_REGISTRY_IMAGE}/accounts:latest .  
#     - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest ${CI_REGISTRY_IMAGE}/accounts:$CI_JOB_ID  
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY 
#     - docker push ${CI_REGISTRY_IMAGE}/accounts:$CI_JOB_ID  
#     - docker push ${CI_REGISTRY_IMAGE}/accounts:latest  

# monolith-poller-back-end-build-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - cd monolith/poller
#     - docker build -t ${CI_REGISTRY_IMAGE}/monolith_poller:latest .  
#     - docker tag ${CI_REGISTRY_IMAGE}/monolith_poller:latest ${CI_REGISTRY_IMAGE}/monolith_poller:$CI_JOB_ID  
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY 
#     - docker push ${CI_REGISTRY_IMAGE}/monolith_poller:$CI_JOB_ID  
#     - docker push ${CI_REGISTRY_IMAGE}/monolith_poller:latest  
  
# ## DEPLOYING

# deploy-monolith-api-image-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: docker:20.10.16
#   needs:
#     - monolith-api-back-end-build-job
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
#     - docker pull ${CI_REGISTRY_IMAGE}/monolith_api:latest
#     - docker tag ${CI_REGISTRY_IMAGE}/monolith_api:latest registry.heroku.com/$HEROKU_MONOLITH_API_APP/web:latest
#     - docker push registry.heroku.com/$HEROKU_MONOLITH_API_APP/web:latest

# deploy-accounts-api-image-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: docker:20.10.16
#   needs:
#     - accounts-api-back-end-build-job
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
#     - docker pull ${CI_REGISTRY_IMAGE}/accounts:latest
#     - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest registry.heroku.com/$HEROKU_ACCOUNT_API_APP/web:latest
#     - docker push registry.heroku.com/$HEROKU_ACCOUNT_API_APP/web:latest

# deploy-monolith-poller-image-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: docker:20.10.16
#   needs:
#     - monolith-poller-back-end-build-job
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
#     - docker pull ${CI_REGISTRY_IMAGE}/monolith_poller:latest
#     - docker tag ${CI_REGISTRY_IMAGE}/monolith_poller:latest registry.heroku.com/$HEROKU_MONOLITH_POLLER_APP/worker:latest
#     - docker push registry.heroku.com/$HEROKU_MONOLITH_POLLER_APP/worker:latest

# # RELEASE

# release-monolith-api-image-job:
#   stage: deploy
#   image: node:10.17-alpine
#   needs:
#     - deploy-monolith-api-image-job
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   before_script:
#     - apk add curl bash
#     - curl https://cli-assets.heroku.com/install.sh | sh
#   script:
#     - heroku container:release web --app $HEROKU_MONOLITH_API_APP

# release-accounts-api-image-job:
#   stage: deploy
#   image: node:10.17-alpine
#   needs:
#     - deploy-accounts-api-image-job
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   before_script:
#     - apk add curl bash
#     - curl https://cli-assets.heroku.com/install.sh | sh
#   script:
#     - heroku container:release web --app $HEROKU_ACCOUNT_API_APP

# release-monolith-poller-image-job:
#   stage: deploy
#   image: node:10.17-alpine
#   needs:
#     - deploy-monolith-poller-image-job
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   before_script:
#     - apk add curl bash
#     - curl https://cli-assets.heroku.com/install.sh | sh
#   script:
#     - heroku container:release worker --app $HEROKU_MONOLITH_POLLER_APP

# pages:
#   stage: deploy
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   dependencies:
#     - ghi-front-end-build-job
#   needs:
#     - ghi-front-end-build-job
#   script:
#     - mv ghi/build/ public
#   artifacts:
#     paths:
#       - public