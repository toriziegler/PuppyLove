stages:
  - test  # Run tests first
  - build  # Run build after tests
  - deploy  # Run deploy after build

services:
  - postgres: 14.2-bullseye

variables:
  POSTGRES_PASSWORD: test
  DATABASE_URL: postgresql://postgres:test@postgres:5432/postgres

## TESTING
monolith-api-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd monolith/api
    - pip install -r requirements.txt
    - export DATABASE_URL
    - python manage.py migrate  # Migrate the database
    - python manage.py test  # Run the tests

accounts-api-unit-test-job:
image: python:3-bullseye
stage: test
script:
  - cd accounts_microservice
  - pip install -r requirements.txt
  - export DATABASE_URL
  - python manage.py migrate # Migrate the database
  - python manage.py test # Run the tests

lint-project-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 monolith  # Run flake8 on project ot check for code quality

## BUILDING
ghi-front-end-build-job:
  rules:
      # Only run if pushing to the main branch
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: node:lts-bullseye
  needs:
    - monolith-api-unit-test-job   # These three must succeed for build-job to run
    - accounts-api-unit-test-job
    - lint-project-job  
  script:
    - cd ghi
    - npm install
    - npm run build   # Build the React application
  artifacts:
    paths:
      - ghi/build/  # Save all of the files in the build path


monolith-api-back-end-build-job:
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd monolith/api
    - docker build -t ${CI_REGISTRY_IMAGE}/monolith_api:latest .  # Builds the image
    - docker tag ${CI_REGISTRY_IMAGE}/monolith_api:latest ${CI_REGISTRY_IMAGE}/monolith_api:$CI_JOB_ID  # Gives the image a specific name
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY  # Authenticates with the GitLab image registry
    - docker push ${CI_REGISTRY_IMAGE}/monolith_api:$CI_JOB_ID  # Stores your image in the GitLab image registry w/ version from tag
    - docker push ${CI_REGISTRY_IMAGE}/monolith_api:latest  # Stores your image in the GitLab image registry with the name latest


accounts-api-back-end-build-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd accounts_microservice
    - docker build -t ${CI_REGISTRY_IMAGE}/accounts:latest .  
    - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest ${CI_REGISTRY_IMAGE}/accounts:$CI_JOB_ID  
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY 
    - docker push ${CI_REGISTRY_IMAGE}/accounts:$CI_JOB_ID  
    - docker push ${CI_REGISTRY_IMAGE}/accounts:latest  


monolith-poller-back-end-build-job:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd monolith/poller
    - docker build -t ${CI_REGISTRY_IMAGE}/monolith_poller:latest .  
    - docker tag ${CI_REGISTRY_IMAGE}/monolith_poller:latest ${CI_REGISTRY_IMAGE}/monolith_poller:$CI_JOB_ID  
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY 
    - docker push ${CI_REGISTRY_IMAGE}/monolith_poller:$CI_JOB_ID  
    - docker push ${CI_REGISTRY_IMAGE}/monolith_poller:latest  
  
## DEPLOYING